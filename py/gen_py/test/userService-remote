#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from test import userService
from test.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string log_test(string info)')
    print('  string registe(string info)')
    print('  string getsdreader(string info)')
    print('  string getdevice(string info)')
    print('  string gettime(string info)')
    print('  string retime(string info)')
    print('  string getpower(string info)')
    print('  string getdataresult(string info)')
    print('  string getuser(string info)')
    print('  string getroles(string info)')
    print('  string getaccessjson(string info)')
    print('  string deleteuser(string info)')
    print('  string deleterole(string info)')
    print('  string userchangerole(string info)')
    print('  string rolechangeaccess(string info)')
    print('  string downloadresources(string info)')
    print('  string downloadinstruction(string info)')
    print('  string getmineresult(string info)')
    print('  string getconditionresult(string info)')
    print('  string newuser(string info)')
    print('  string newrole(string info)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = userService.Client(protocol)
transport.open()

if cmd == 'log_test':
    if len(args) != 1:
        print('log_test requires 1 args')
        sys.exit(1)
    pp.pprint(client.log_test(args[0],))

elif cmd == 'registe':
    if len(args) != 1:
        print('registe requires 1 args')
        sys.exit(1)
    pp.pprint(client.registe(args[0],))

elif cmd == 'getsdreader':
    if len(args) != 1:
        print('getsdreader requires 1 args')
        sys.exit(1)
    pp.pprint(client.getsdreader(args[0],))

elif cmd == 'getdevice':
    if len(args) != 1:
        print('getdevice requires 1 args')
        sys.exit(1)
    pp.pprint(client.getdevice(args[0],))

elif cmd == 'gettime':
    if len(args) != 1:
        print('gettime requires 1 args')
        sys.exit(1)
    pp.pprint(client.gettime(args[0],))

elif cmd == 'retime':
    if len(args) != 1:
        print('retime requires 1 args')
        sys.exit(1)
    pp.pprint(client.retime(args[0],))

elif cmd == 'getpower':
    if len(args) != 1:
        print('getpower requires 1 args')
        sys.exit(1)
    pp.pprint(client.getpower(args[0],))

elif cmd == 'getdataresult':
    if len(args) != 1:
        print('getdataresult requires 1 args')
        sys.exit(1)
    pp.pprint(client.getdataresult(args[0],))

elif cmd == 'getuser':
    if len(args) != 1:
        print('getuser requires 1 args')
        sys.exit(1)
    pp.pprint(client.getuser(args[0],))

elif cmd == 'getroles':
    if len(args) != 1:
        print('getroles requires 1 args')
        sys.exit(1)
    pp.pprint(client.getroles(args[0],))

elif cmd == 'getaccessjson':
    if len(args) != 1:
        print('getaccessjson requires 1 args')
        sys.exit(1)
    pp.pprint(client.getaccessjson(args[0],))

elif cmd == 'deleteuser':
    if len(args) != 1:
        print('deleteuser requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteuser(args[0],))

elif cmd == 'deleterole':
    if len(args) != 1:
        print('deleterole requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleterole(args[0],))

elif cmd == 'userchangerole':
    if len(args) != 1:
        print('userchangerole requires 1 args')
        sys.exit(1)
    pp.pprint(client.userchangerole(args[0],))

elif cmd == 'rolechangeaccess':
    if len(args) != 1:
        print('rolechangeaccess requires 1 args')
        sys.exit(1)
    pp.pprint(client.rolechangeaccess(args[0],))

elif cmd == 'downloadresources':
    if len(args) != 1:
        print('downloadresources requires 1 args')
        sys.exit(1)
    pp.pprint(client.downloadresources(args[0],))

elif cmd == 'downloadinstruction':
    if len(args) != 1:
        print('downloadinstruction requires 1 args')
        sys.exit(1)
    pp.pprint(client.downloadinstruction(args[0],))

elif cmd == 'getmineresult':
    if len(args) != 1:
        print('getmineresult requires 1 args')
        sys.exit(1)
    pp.pprint(client.getmineresult(args[0],))

elif cmd == 'getconditionresult':
    if len(args) != 1:
        print('getconditionresult requires 1 args')
        sys.exit(1)
    pp.pprint(client.getconditionresult(args[0],))

elif cmd == 'newuser':
    if len(args) != 1:
        print('newuser requires 1 args')
        sys.exit(1)
    pp.pprint(client.newuser(args[0],))

elif cmd == 'newrole':
    if len(args) != 1:
        print('newrole requires 1 args')
        sys.exit(1)
    pp.pprint(client.newrole(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
